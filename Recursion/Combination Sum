class Solution {
    List<List<Integer>> ans = new ArrayList<>();

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<Integer> ds = new ArrayList<>();
        backtrack(0,candidates,target,ds);
        return ans;
    }
    public void backtrack(int i,int[] arr, int target, List<Integer> ds){
        if(i==arr.length){
            if(target == 0){
                ans.add(new ArrayList<>(ds));
            }
            return ; 
        }
        
        if(arr[i]<=target){
            //pick
            ds.add(arr[i]);
            backtrack(i,arr,target-arr[i],ds);
            // not pick
            ds.remove(ds.size()-1);
        }
            backtrack(i+1,arr,target,ds);
        }
    }
