// Brute
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> pair = new HashSet<>(); 
      
        int n = nums.length;
        for(int i=0;i<n;i++){
            for(int j = i+1;j<n;j++){
                for(int k = j+1;k<n;k++){
                    if(nums[i] + nums[j] + nums[k] == 0){
                        List<Integer> lst = Arrays.asList(nums[i],nums[j],nums[k]);
                        lst.sort(null);
                        pair.add(lst);
                        
                    }
                }
            }
            
        }
        List<List<Integer>> ans = new ArrayList<>(pair);
        return ans;
    }
}


//optimal
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();

        int n = nums.length;
        
        for(int i=0;i<n;i++){
        if(i!=0 && nums[i] == nums[i-1]) continue;
        int j= i+1;
        int k= n-1;

        
        while(j<k){
            int sum = nums[i] + nums [j] + nums[k];
            if(sum< 0){
                j++;
            }
            else if(sum >0){
                k--;
            }
            else{
                List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
                ans.add(temp);
                j++;
                k--;

                //skip the duplicates
                while(j<k && nums[j] == nums[j-1]){ j++;}
                while(j<k && nums[k] == nums[k+1]){ k--;}
            }

        }
        }
        return ans;
    }
}
