class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        int ans[][] = new int[n][m];
        int vis[][] = new int[n][m];
        Queue<int[]> q = new LinkedList<>();
        for(int i=0 ;i <n;i++){
            for(int j=0; j<m;j++){
                if(mat[i][j] == 0){
                    ans[i][j] = 0;
                    q.offer(new int[]{i,j});
                    vis[i][j] = 1;
                }
            }
        }
        while(!q.isEmpty()){
            int[] pt = q.poll();
            int r = pt[0];
            int c = pt[1];
            int[] dx = {-1,0,1,0};
            int[] dy = {0,-1,0,1};
            for(int i=0 ; i<4 ;i++){
                int nrow = r + dx[i];
                int ncol = c + dy[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && mat[nrow][ncol] == 1 && vis[nrow][ncol] !=1){
                    ans[nrow][ncol] = ans[r][c] + 1; 
                    q.offer(new int[]{nrow,ncol});
                    vis[nrow][ncol] = 1;
                }

            }
        }
        return ans;
    }
  
}
