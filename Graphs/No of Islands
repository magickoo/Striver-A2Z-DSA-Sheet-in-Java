class Solution {
    public int numIslands(char[][] grid) {
        int r = grid.length;
        int c = grid[0].length;
        int cnt =0;
        //initialize Visited matrix
        boolean[][] visited = new boolean[r][c];
        
        for(int i=0; i<r; i++){
            for(int j=0 ;j<c ;j++){
                if(!visited[i][j] && grid[i][j] == '1'){
                    cnt++;
                    bfs(i,j,visited,grid);
                    //cnt++; 
                }
            }
        }
        return cnt;
    }
    public void bfs(int r, int c,boolean[][] visited, char[][] grid){
        visited[r][c] = true;
        Queue<int[]>  q = new LinkedList<>();
        q.add(new int[]{r,c});
        int n = grid.length;
        int m = grid[0].length;
        while(!q.isEmpty()){
            int[] current = q.poll();
            int row = current[0];
            int col = current[1];
           for(int dr = -1 ; dr<=1 ; dr++){
            for(int dc = -1 ; dc<=1 ; dc++){
                if((dr == -1 && dc == -1) || (dr == -1 && dc == 1) || (dr == 1 && dc == -1) || (dr == 1 && dc== 1)){
                  continue;
                }
                int nrow = row + dr;
                int ncol = col + dc;
                if(nrow>=0 && ncol>=0 && nrow< n && ncol < m && grid[nrow][ncol] =='1' && !visited[nrow][ncol]){
                    visited[nrow][ncol] = true;
                    q.add(new int[]{nrow,ncol});
                }
            }
           }

        }

    }

}
