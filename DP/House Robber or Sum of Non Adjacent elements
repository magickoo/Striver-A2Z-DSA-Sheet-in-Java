//Memoization soln
class Solution {
    public int rob(int[] nums) {
        int n= nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp,-1);
        return solve(n-1,nums,dp);
    }
    public int solve(int i,int[] nums, int[] dp){
        
        if(i < 0){
            return 0;
        }
        if(i==0){
            return nums[0];
        }
        if( dp[i] != -1){
            return dp[i];
        }
        int pick = nums[i] + solve(i-2,nums,dp);
        int notpick = solve(i-1,nums,dp);

        return dp[i] = Math.max(pick,notpick);
    }

}
//tabulation
class Solution {
    public int rob(int[] nums) {
        int n= nums.length;
        int[] dp = new int[n];
      
        return solve(nums,dp);
    }
    public int solve(int[] nums,int[] dp){
        int n=nums.length;
        //base case
        dp[0] = nums[0];
        
        for(int i=1; i<n;i++){
        int pick = nums[i];
        if(i>1){
            pick += dp[i-2];
        }
        int notpick = dp[i-1];
        dp[i] = Math.max(pick,notpick);
        }

        return dp[n-1];
    }

}
