// memoization


class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int dp[][] = new int[n][W+1];
        for(int[] a: dp){
            Arrays.fill(a,-1);
        }
        
         return f(n-1,W,wt,val,dp);
    } 
    static int f(int ind,int W, int[] wt, int[] val,int[][] dp){
        //base case
        if(ind == 0){
            if(wt[0] <= W) return val[0];
            else return 0;
        }
        if(dp[ind][W] != -1){
            return dp[ind][W];
        }
        int nottake = f(ind-1,W,wt,val,dp);
        int take = Integer.MIN_VALUE;
        if(wt[ind]<= W){
            take = val[ind] + f(ind-1,W-wt[ind],wt,val,dp);
        }
        
        
        return dp[ind][W] = Math.max(take,nottake);
        
    }
}


