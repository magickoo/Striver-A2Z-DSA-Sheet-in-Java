class Solution {
    public int minimumDifference(int[] nums) {
        int n= nums.length;
        int sum = 0;

        for(int i=0;i<n;i++){
            sum += nums[i];
        }
       
        boolean dp[][] = new boolean[n][sum+1];
        return f(n,sum,nums,dp);
    }
    public int f(int n,int k, int[] nums, boolean[][] dp){
        //base case
        for(int i=0 ;i<n;i++){
            dp[i][0] = true;
        }
        if(nums[0] <= k){
            dp[0][k] = true;
        }
        for(int ind=1;ind<n;ind++){
            for(int target=1; target <= k ;target++){

                boolean nottake= dp[ind-1][target];
                boolean take = false;
                if(nums[ind] <= target){
                    take = dp[ind-1][target-nums[ind]];
                }

                dp[ind][target] = nottake || take ; 
            }
        }
        int mini = Integer.MAX_VALUE;

        for(int i=0 ;i <= k;i++){
            if(dp[n-1][i]){
                int diff = Math.abs(i-(k-i));
                mini = Math.min(mini,diff);
            }

        }
        return mini;
    }
}
