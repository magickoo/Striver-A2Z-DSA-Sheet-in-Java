class Solution {
    
    public static int countPartitions(int n, int d, int[] arr) {
        
        int sum =0;
        for(int i=0;i<n;i++){
            sum += arr[i];
        }
        long dp[][] = new long[n][sum+1];
	    for(long[] a:dp){
	        Arrays.fill(a,-1);
	    }
	    int s= sum - d;
	    if(s% 2 !=0 || s<0){
	        return 0;
	    }
	    return (int)f(n-1,s/2,arr,dp);
    }
    
    public static long f(int ind,int sum,int arr[],long[][] dp){
	   int mod = 1000000007;
	    if(ind==0 ){
	        if(arr[0] == 0 && sum == 0){
	            return 2;
	        }
	        if(sum == 0 || arr[0] == sum){
	            return 1;
	        }
	        return 0;
	       
	    }
	    if(dp[ind][sum] != -1){
	        return dp[ind][sum];
	    }
	    
	    long nottake = f(ind-1,sum,arr,dp);
	    long take = 0;
	    
	    if(arr[ind]<=sum){
	        take = f(ind-1,sum-arr[ind],arr,dp);
	    }
	    
	    return dp[ind][sum]= (take+nottake)% mod ;
	    
	}
}
        
