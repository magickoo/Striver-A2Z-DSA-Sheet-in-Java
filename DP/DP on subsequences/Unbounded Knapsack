//{ Driver Code Starts
//Initial Template for Java

class Solution{
    static int knapSack(int N, int W, int val[], int wt[])
    {
        int dp[][] = new int[N][W+1];
        for(int[] a:dp){
            Arrays.fill(a,-1);
        }
        return f(N-1,W,val,wt,dp);
    }
    static int f(int ind , int W, int val[] , int wt[], int[][] dp){
        //base case
        
        if(ind == 0 ){
            if(wt[ind] <= W){
                return (int)(W/wt[0]) * (val[0]);
            }
            return 0;
        }
        if(dp[ind][W] != -1){
            return dp[ind][W];
        }
        
        int nottake = f(ind-1,W,val,wt,dp);
        int take = Integer.MIN_VALUE;
        if(wt[ind] <= W){
            take = val[ind] + f(ind,W - wt[ind],val,wt,dp);
        }
        
        return dp[ind][W] = Math.max(take,nottake);
    }
}
