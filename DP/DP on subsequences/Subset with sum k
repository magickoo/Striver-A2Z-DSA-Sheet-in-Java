// memoization --> int dp[][] 

//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            int N = Integer.parseInt(read.readLine());
            String input_line[] = read.readLine().trim().split("\\s+");
            int arr[]= new int[N];
            for(int i = 0; i < N; i++)
                arr[i] = Integer.parseInt(input_line[i]);
            int sum = Integer.parseInt(read.readLine());

            Solution ob = new Solution();
            if(ob.isSubsetSum(N, arr, sum))
            System.out.println(1);
            else
            System.out.println(0);

            
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution{


    static Boolean isSubsetSum(int N, int arr[], int sum){
        // code here
        int dp[][] = new int[N][sum+1];
        for(int[] a: dp){
            Arrays.fill(a,-1);
        }
    
        return f(N-1,sum,arr,dp);
        
    }
    static Boolean f(int ind,int target,int[] arr, int[][] dp){
        //base case
        if(target==0){
            return true;
        }
        if(ind == 0){
            return (arr[ind] == target);
        }
        
        if(dp[ind][target] !=-1){
            return (dp[ind][target]==0 ? false: true);
        }
        
        Boolean nottaken = f(ind-1,target,arr,dp);
        Boolean take = false;
        
        if(arr[ind]<= target){
            take = f(ind-1,target-arr[ind],arr,dp);
        }
        
        dp[ind][target]= nottaken || take ? 1 :0;
        
        return (nottaken || take);
    }
}

//tabulation 

class Solution{


    static Boolean isSubsetSum(int N, int arr[], int sum){
        // code here
        Boolean dp[][] = new Boolean[N][sum+1];
        
    
        return f(N,sum,arr,dp);
        
    }
    static Boolean f(int n,int sum,int[] arr, Boolean[][] dp){
        //base case (initial)
        for(int i=0 ;i<n;i++){
            // target = 0 then true
            dp[i][0] = true;
            
        }
        
        if(arr[0] <= sum){
            dp[0][arr[0]] = true;
        }
        
        
        for(int ind=1; ind<n; ind++){
            
            for(int target =1; target <= sum ; sum ++){
                
                Boolean nottake = dp[ind-1][target];
                Boolean take = false;
                
                if(arr[ind] <= target){
                    take = dp[ind-1][target-arr[ind]];
                }
                
                dp[ind][target] = nottake || take;
                
            }
            
        }
        
        
        return dp[n-1][sum];

        

    }
}
