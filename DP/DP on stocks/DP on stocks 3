class Solution {
    public int maxProfit(int[] prices) {
        int n= prices.length;
        int dp[][][] = new int[n][2][3];
        for(int i =0 ; i<n ;i ++){
            for(int j=0;j<2;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }
        
        return f(0,0,0,prices,n,dp);
    }
    public int f(int ind ,int buy ,int cnt, int[] prices,int n, int[][][] dp){

        if(cnt == 2){
            return 0;
        }
        if(ind == n){
            return 0;
        }
        if(dp[ind][buy][cnt] != -1){
            return dp[ind][buy][cnt];
        }
        int profit = 0;
        if(buy == 0){
            profit = Math.max(-prices[ind] + f(ind+1,1,cnt,prices,n,dp),f(ind+1,0,cnt,prices,n,dp));

        }
        if(buy==1){
            profit = Math.max(prices[ind] + f(ind+1,0,cnt+1,prices,n,dp),f(ind+1,1,cnt,prices,n,dp));
        }
        dp[ind][buy][cnt] = profit;
        return profit;

    }
}
