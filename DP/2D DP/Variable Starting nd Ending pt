//Tabulation
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int [][] dp = new int[n][n];
        return f(n,matrix,dp);
    }
    public int f(int n,int[][] matrix,int[][] dp){
        //base case
        for(int j=0;j<n;j++){
            dp[0][j] = matrix[0][j];
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                //up
                int up= matrix[i][j];
                if(i>0){
                    up += dp[i-1][j];
                }
                //ld
                int ld = matrix[i][j];
                if(i>0 && j>0){
                    ld += dp[i-1][j-1];
                }
                else{
                    ld += Math.pow(10,9);
                }
                //rd
                int rd = matrix[i][j] ;
                if(i>0 && j<n-1){
                    rd += dp[i-1][j+1];
                }
                else{
                    rd += Math.pow(10,9);
                }

                dp[i][j] = Math.min(up,Math.min(ld,rd));
            }
        }
        int ans= Integer.MAX_VALUE;

        for(int j=0;j<n;j++){
            ans = Math.min(ans,dp[n-1][j]);
        }

        return ans;
    }
}
