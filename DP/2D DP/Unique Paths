// Memoization
class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        for(int[] arr : dp){
            Arrays.fill(arr,-1);
        }
        return f(m-1,n-1,dp);
    }
    public int f(int m, int n, int[][] dp){
        //base case , 1 denotes the path exists
        if(m==0 && n==0){
            return 1;
        }
        if( m <0 || n<0){
            return 0;
        }
        if(dp[m][n] != -1){
            return dp[m][n];
        }
        //up
        int up = f(m-1,n,dp);
        //left 
        int left= f(m,n-1,dp);
        return dp[m][n] = up+ left;
    }
}
//tabulation

class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        for(int[] arr : dp){
            Arrays.fill(arr,-1);
        }
        return f(m,n,dp);
    }
    public int f(int m, int n, int[][] dp){
        //base case 
        for(int i=0 ; i< m;i++){
            for(int j=0 ; j<n ;j++){
                if(i==0 && j==0){
                    dp[i][j] = 1;
                    continue;
                }

                int up =0;
                int left=0;

                if(i>0){
                    up = dp[i-1][j];
                }
                if(j>0){
                    left = dp[i][j-1];
                }

                dp[i][j]= up+left;
            }
        }
        
        return dp[m-1][n-1];
    }
}
